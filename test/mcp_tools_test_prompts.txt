# MCPツールのテストプロンプト集

## 1. 基本的な会話でセッションを構築

### 1-1. 最初の挨拶
claudeさんに「こんにちは、私は山田太郎です」と言って

### 1-2. 質問1
claudeさんに「今日は2025年1月8日ですが、今年の干支は何ですか？」と聞いて

### 1-3. 質問2
claudeさんに「私の名前を覚えていますか？」と聞いて

### 1-4. 質問3
claudeさんに「Pythonで『Hello World』を出力する方法を教えて」と聞いて

### 1-5. 質問4
claudeさんに「先ほど教えてもらったPythonコードを実行したら動きました。ありがとう」と言って

## 2. 履歴確認ツールのテスト

### 2-1. 実行履歴の確認（5件の会話が記録されているはず）
claudeさんとの今までの会話履歴を5件見せて

### 2-2. 現在のセッションID確認
claudeさんとの現在のセッションIDを教えて

## 3. ファイルコンテキストツールのテスト

### 3-1. 正常なファイル読み込み
README.mdファイルをコンテキストにしてclaudeさんに「このプロジェクトの目的を一言で説明して」と聞いて

### 3-2. 存在しないファイル（エラーテスト）
存在しないファイル /tmp/not_exist.txt をコンテキストにしてclaudeさんに「このファイルを説明して」と聞いて

## 4. セッション管理ツールのテスト

### 4-1. セッション継続性の確認
claudeさんに「今まで話した内容を簡単にまとめて」と聞いて

### 4-2. Claude CLIの動作確認
claudeさんのCLI動作確認をして

### 4-3. セッションリセット
claudeさんとのセッションをリセットして

### 4-4. リセット後の確認（記憶が消えているはず）
claudeさんに「私の名前を覚えていますか？」と聞いて

## 5. 履歴管理ツールのテスト

### 5-1. 新しいセッションで会話
claudeさんに「新しいセッションが始まりました。よろしくお願いします」と言って

### 5-2. 履歴クリア
claudeさんとの実行履歴をクリアして

### 5-3. クリア後の確認（履歴が0件になっているはず）
claudeさんとの実行履歴を見せて

## 6. 複雑なシナリオのテスト

### 6-1. 長い処理のテスト
claudeさんに「1から30までのフィボナッチ数列を計算して、それぞれの数が素数かどうかも判定してください」と聞いて

### 6-2. 日本語と特殊文字のテスト
claudeさんに「絵文字😊🎉と記号（♪♫♬）を使って楽しい新年の挨拶をしてください」と言って

### 6-3. コードファイルのコンテキストテスト
src/claude_cli_server.pyファイルをコンテキストにしてclaudeさんに「このファイルで定義されているMCPツールの数を教えて」と聞いて

## 7. セッション継続性の最終確認

### 7-1. 複数の情報を記憶させる
claudeさんに「3つの情報を覚えてください：1) 私の誕生日は4月15日、2) 好きな色は青、3) ペットの名前はポチです」と言って

### 7-2. 記憶の確認
claudeさんに「先ほど伝えた3つの情報を教えて」と聞いて

### 7-3. 部分的な記憶の確認
claudeさんに「私のペットの名前は何でしたか？」と聞いて

## テスト実行の順序
1. 基本的な会話（1-1から1-5）を順番に実行
2. 履歴が5件たまったところで履歴確認ツール（2-1、2-2）をテスト
3. ファイルコンテキストツール（3-1、3-2）をテスト
4. セッション管理ツール（4-1から4-4）をテスト
5. 履歴管理ツール（5-1から5-3）をテスト
6. 複雑なシナリオ（6-1から6-3）をテスト
7. 最後にセッション継続性の確認（7-1から7-3）をテスト

## 期待される結果
- 各ツールが正しい`tool_name`を返すこと
- セッション継続性が保たれること（リセット前まで）
- エラーハンドリングが適切に動作すること
- 日本語と特殊文字が正しく処理されること
- タイムアウト（300秒）内にすべての処理が完了すること