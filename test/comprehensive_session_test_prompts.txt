# Claude CLI MCP Server 総括的セッションテストプロンプト

このファイルは、セッション管理機能を包括的にテストするためのプロンプト集です。
Git的なブランチ管理を含む、すべての重要な機能を確認します。

## 1. 基本機能確認

### 1.1 初期動作確認
test_claude_cli:
（Claude CLIの動作を確認）

### 1.2 基本的な会話
execute_claude:
こんにちは、私は田中太郎です。よろしくお願いします。

execute_claude:
私の名前を覚えていますか？

## 2. セッション管理基礎

### 2.1 セッションID取得
get_current_session:
（現在のセッションIDを確認）

### 2.2 セッションリセット
reset_session:
（セッションをリセット）

execute_claude:
私の名前を知っていますか？
（期待：知らない）

## 3. Git的ブランチ管理テスト

### 3.1 メインブランチ作成
execute_claude:
【プロジェクト開始】私は開発者の山田です。新しいWebアプリを作ります。

get_current_session:
（commit_1として記録）

### 3.2 開発を進める
execute_claude:
フロントエンドはReactを使います。

get_current_session:
（commit_2として記録）

execute_claude:
バックエンドはNode.jsにします。

get_current_session:
（commit_3として記録）

execute_claude:
データベースはPostgreSQLを選択しました。

get_current_session:
（commit_4として記録）

### 3.3 ブランチ1：別の技術スタックを検討
reset_session:

set_current_session:
（commit_2を設定）

execute_claude:
これまでの会話内容を教えてください。
（期待：山田、Webアプリ、Reactまで。Node.jsとPostgreSQLは知らない）

execute_claude:
【ブランチ1】実はバックエンドはPythonのDjangoにしようと思います。

get_current_session:
（branch1_commit_1として記録）

execute_claude:
データベースはMySQLにします。

get_current_session:
（branch1_commit_2として記録）

### 3.4 ブランチ2：NoSQLの検討
reset_session:

set_current_session:
（commit_3を設定）

execute_claude:
これまでの技術選定を確認してください。
（期待：React、Node.jsまで。PostgreSQLは知らない）

execute_claude:
【ブランチ2】データベースはMongoDBのようなNoSQLにしようかと考えています。

get_current_session:
（branch2_commit_1として記録）

### 3.5 メインブランチに戻る
reset_session:

set_current_session:
（commit_4を設定）

execute_claude:
現在の技術スタックをすべて教えてください。
（期待：React、Node.js、PostgreSQL）

## 4. セッションタイムスタンプ機能の確認

### 4.1 時系列データの作成
reset_session:

execute_claude:
朝9時：プロジェクト開始します。

get_current_session:
（time_9amとして記録）

execute_claude:
朝10時：要件定義が完了しました。

get_current_session:
（time_10amとして記録）

execute_claude:
昼12時：設計フェーズに入りました。

get_current_session:
（time_12pmとして記録）

execute_claude:
午後3時：実装を開始しました。

get_current_session:
（time_3pmとして記録）

execute_claude:
午後5時：テストフェーズです。

get_current_session:
（time_5pmとして記録）

### 4.2 任意の時点に戻る
reset_session:

set_current_session:
（time_10amを設定）

execute_claude:
現在の進捗状況を教えてください。
（期待：要件定義まで完了。設計以降は知らない）

reset_session:

set_current_session:
（time_3pmを設定）

execute_claude:
これまでの作業内容をすべて教えてください。
（期待：開始、要件定義、設計、実装開始まで。テストは知らない）

## 5. エラーケースと境界値テスト

### 5.1 存在しないセッションID
set_current_session:
invalid-session-id-12345

execute_claude:
このセッションは有効ですか？

### 5.2 オーバーランテスト（reset_sessionなし）
execute_claude:
テストユーザーAです。

get_current_session:
（saved_session_idとして記録）

execute_claude:
追加情報：好きな色は青です。
（saved_session_idが使われる）

execute_claude:
さらに追加：趣味は読書です。

set_current_session:
（saved_session_idを設定）

execute_claude:
私について何を知っていますか？
（期待：テストユーザーAのみ。青色は知っているかもしれない。読書は知らない）

## 6. 実用的なユースケース

### 6.1 マルチパス会話
reset_session:

execute_claude:
私は研究者です。AIについて3つの異なる観点から議論したいです。

get_current_session:
（base_pointとして記録）

reset_session:

set_current_session:
（base_pointを設定）

execute_claude:
【観点1】倫理的な側面から、AIの発展についてどう思いますか？

get_current_session:
（ethics_branchとして記録）

reset_session:

set_current_session:
（base_pointを設定）

execute_claude:
【観点2】技術的な側面から、現在のAIの限界は何ですか？

get_current_session:
（tech_branchとして記録）

reset_session:

set_current_session:
（base_pointを設定）

execute_claude:
【観点3】社会的な側面から、AIが雇用に与える影響は？

### 6.2 会話の統合
reset_session:

set_current_session:
（ethics_branchを設定）

execute_claude:
倫理的な議論の要点をまとめてください。

reset_session:

set_current_session:
（tech_branchを設定）

execute_claude:
技術的な議論の要点をまとめてください。

## 7. パフォーマンステスト

### 7.1 実行履歴の確認
get_execution_history:
50

### 7.2 履歴のクリア
clear_execution_history:

get_execution_history:
10
（期待：空のリスト）

## 8. ファイルコンテキスト機能

### 8.1 ファイル付き実行
execute_claude_with_context:
このファイルの内容を要約してください。
/mnt/c/prj/AI/prg/mcp-claude-context-continuity/README.md

### 8.2 セッション継続性の確認
execute_claude:
先ほど見たファイルは何についてのものでしたか？

## 期待される結果

1. **基本機能**: すべてのMCPツールが正常に動作
2. **セッション継続**: 会話の文脈が保持される
3. **ブランチ管理**: Gitのように任意の時点から分岐可能
4. **タイムスタンプ**: 過去の任意の時点に正確に戻れる
5. **時系列整合性**: 未来の情報は知らない
6. **エラー処理**: 不正なセッションIDでも適切に処理

## デバッグ情報

テスト実行後、以下を確認：
1. `claude_command_debug.log` - セッションID更新履歴
2. 各セッションIDが正しく記録されているか
3. 復元時に期待通りの知識範囲か